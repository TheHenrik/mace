@startuml
skinparam useBetaStyle true
skinparam linetype ortho

<style>
    classDiagram{
        FontColor Black
        BackgroundColor White
        LineThickness 2
        LineColor Black
        RoundCorner 10
    }
</style>
class HullProfile {
hight: <class 'int'>
width: <class 'int'>
position: <class 'int'>
}
class Hull {
lenght: <class 'int'>
profile: <class 'mace.domain.plane.HullProfile'>
mass: <class 'float'>
}
HullProfile <-- Hull
class Flap {
}
class WingSegment {
nose_inner: <class 'numpy.ndarray'>
nose_outer: <class 'numpy.ndarray'>
back_inner: <class 'numpy.ndarray'>
back_outer: <class 'numpy.ndarray'>
mass: <class 'float'>
area: <class 'float'>
volume: <class 'float'>
}
class TEmpennage {
elevator: typing.List[mace.domain.plane.WingSegment]
airfoil_e: <class 'str'>
rudder: typing.List[mace.domain.plane.WingSegment]
airfoil_r: <class 'str'>
mass: <class 'float'>
}
WingSegment <-- TEmpennage
WingSegment <-- TEmpennage
class VEmpennage {
segments: typing.List[mace.domain.plane.WingSegment]
mass: <class 'float'>
}
WingSegment <-- VEmpennage
class EmpennageType {
typ: mace.domain.plane.TEmpennage | mace.domain.plane.VEmpennage
}
VEmpennage <-- EmpennageType
class Wing {
segments: typing.List[mace.domain.plane.WingSegment]
airfoil: <class 'str'>
mass: <class 'float'>
}
WingSegment <-- Wing
class Plane {
name: <class 'str'>
empennage: <class 'mace.domain.plane.EmpennageType'>
wing: <class 'mace.domain.plane.Wing'>
hull: <class 'mace.domain.plane.Hull'>
mass: <class 'float'>
}
EmpennageType <-- Plane
Wing <-- Plane
Hull <-- Plane
@enduml